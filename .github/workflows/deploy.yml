name: CI/CD to EC2 via CodeDeploy (Web API 2)

on:
  push:
    branches: [ "master" ]   # change if you deploy from a different branch

env:
  AWS_REGION: us-east-2
  S3_BUCKET: codedeploy-audioapp
  APP_NAME: audio-api-dg
  DEPLOYMENT_GROUP: audio-api-dg
  BUILD_CONFIGURATION: Release

  SOLUTION_FILE: SimpleServer.sln
  WEB_PROJECT: SimpleServer\SimpleServer.csproj

jobs:
  build-and-deploy:
    runs-on: windows-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore $env:SOLUTION_FILE

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build solution (Release)
        run: msbuild $env:SOLUTION_FILE /p:Configuration=$env:BUILD_CONFIGURATION /m

      - name: Publish Web API 2 project
        run: >
          msbuild $env:WEB_PROJECT
          /p:Configuration=$env:BUILD_CONFIGURATION
          /p:WebPublishMethod=FileSystem
          /p:DeleteExistingFiles=True
          /p:PublishUrl="$env:GITHUB_WORKSPACE\publish"

      - name: Prepare CodeDeploy bundle
        shell: pwsh
        run: |
          $workspace = $env:GITHUB_WORKSPACE
          $publish   = Join-Path $workspace "publish"
          $srcAppspec = Join-Path $workspace "SimpleServer\appspec.yml"
          $srcScripts = Join-Path $workspace "SimpleServer\scripts"

          # Make sure publish folder exists (in case publish step didnâ€™t create it)
          New-Item -ItemType Directory -Force -Path $publish | Out-Null

          if (-not (Test-Path $srcAppspec)) { throw "Missing $srcAppspec" }
          if (-not (Test-Path $srcScripts)) { throw "Missing $srcScripts" }

          Copy-Item $srcAppspec (Join-Path $publish "appspec.yml") -Force
          New-Item -ItemType Directory -Force -Path (Join-Path $publish "scripts") | Out-Null
          Copy-Item (Join-Path $srcScripts "*") (Join-Path $publish "scripts") -Recurse -Force

          "GitHub build $env:GITHUB_SHA at $(Get-Date -Format s)" | Out-File (Join-Path $publish "DEPLOYED_FROM_GHA.txt") -Encoding UTF8

          $zipName = "audioserver_${{ github.run_id }}.zip"
          $zipPath = Join-Path $workspace $zipName

          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path (Join-Path $publish "*") -DestinationPath $zipPath -Force

          echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::288761750380:role/GithubActionsAudioServer   # <<< replace with your role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload bundle to S3
        run: aws s3 cp "${{ env.ZIP_NAME }}" "s3://${{ env.S3_BUCKET }}/${{ env.ZIP_NAME }}"

      - name: Create CodeDeploy deployment
        run: >
          aws deploy create-deployment
          --application-name "${{ env.APP_NAME }}"
          --deployment-group-name "${{ env.DEPLOYMENT_GROUP }}"
          --s3-location bucket=${{ env.S3_BUCKET }},key=${{ env.ZIP_NAME }},bundleType=zip
